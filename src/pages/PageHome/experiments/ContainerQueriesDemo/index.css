/* https://lightningcss.dev/ */
/* .future {
  color: #fff;
  --color: lch(85% 58 205);
  background-color: #215178;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='rgba(255,255,255,0.05)' fill-opacity='1'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3Cpath d='M6 5V0H5v5H0v1h5v94h1V6h94V5H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E"),
    radial-gradient(#1f4d97, #030b16);
  background-position: 0 0;
  background-repeat: repeat;
  background-size: auto;
  background-attachment: scroll;
  background-origin: padding-box;
  background-clip: border-box;
  position: relative;
  box-shadow: inset 0 0 0 1px #ffffff1a;
} */

/* ======================
        Example 1
====================== */
/* The container queries cannot apply to the same element that is establishing the container context. 
The element that defines container-type cannot itself be the target of container queries within the same rule.
   
Also if you throw a border or padding directly on the container it will throw 
everything off. It seems that the container size is measured from the inside. */

.cq {
  container-type: inline-size;
  border-radius: 5px;
  height: 24px;
  outline: 1px dashed #333;
}

.cq > div {
  height: 100%;
}

@container (min-width: 100px) {
  .cq > div {
    background-color: #fd5b78;
  }
}

@container (min-width: 200px) {
  .cq > div {
    background-color: #ff6037;
  }
}

@container (min-width: 300px) {
  .cq > div {
    background-color: #66ff66;
  }
}

@container (min-width: 400px) {
  .cq > div {
    background-color: #50bfe6;
  }
}
/* ======================
        Example 2
====================== */

.section-container {
  /* inline-size | size
  size is used when you want it to be based on the height & width.
  That said, 99% of the time youly want inline-size. */
  container-type: inline-size;
  container-name: my-container;

  /* 
  You can also use the shortand syntax:
  containertimes: my-container / inline-size;
  */
}

.section-container > div {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.section-container > div > div {
  flex:;
}

/* Here we're using the new media query syntax plus
the container name... 

Note: You can also create ranges by dong things like:
@media (400px < width < 800px){ ... }
*/
@container my-container (width >= 800px) {
  .section-container > div {
    flex-direction: row;
  }
}
